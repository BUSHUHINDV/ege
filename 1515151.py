
'''
Задание 5 № 7751
Автомат получает на вход четырёхзначное число. По этому числу строится новое число по следующим правилам:
1. Складываются первая и вторая, а также третья и четвёртая цифры исходного числа.
2. Полученные два числа записываются друг за другом в порядке возрастания (без разделителей).
NNM.G/G                                                                                                                          Пример. Исходное число: 2366. Суммы: 2 + 3 = 5; 6 + 6 = 12. Результат: 512. Укажите наибольшее число,
в результате обработки которого автомат выдаст число 117.
'''
#s1=''
#s2=''
#for i in range(1000,10000):
#    n=str(i)
#    s1=str(int(n[0])+int(n[1]))
#    s2 = str(int(n[2]) + int(n[3]))
#    if int(s1)<int(s2):
#        ss=s1+s2
#    else:
#        ss=s2+s1
#    if ss=='117':
#        print('i=',i,ss)



#n = 50
#s = 1
#while s < 1000:
#    s *= 2
#    n += 10
#print(n)


#k=0
#l=['А','Б','В','Г']
#for q in l:
#    for w in l:
#        for e in l:
#            for r in l:
#                for t in l:
#                    o=q+w+e+r+t
#                    if o.count('А')==1:
#                        k+=1
#print(k)


#ss=''
#h=125**4 + 25**8 - 30
#while h>0:
#    s = str(h%5)
#    h=h//5
#    ss=s+ss
#print(ss.count('4'))
#s=0
#def F(n,s):
#    if n > 2:
#        print(n,s);s+=n
#        F(n - 3,s)
#        F(n - 4,s)
#
#F(10,0)


#for i in range(1000):
#    x = i
#    a=0; b=1
#    while x > 0:
#        if x%2 > 0:
#            a += x%8
#        else:
#            b = b * (x%8)
#        x = x//8
#    if a==2 and b==12:
#        print('i=',i,a, b)

'''
Задание 17 № 37356 Добавить в вариант
В файле содержится последовательность из 10 000 целых положительных чисел.
Каждое число не превышает 10 000. Определите и запишите в ответе сначала количество пар элементов
последовательности, у которых сумма элементов кратна 9, затем максимальную из сумм элементов таких пар.
В данной задаче под парой подразумевается два различных элемента последовательности.
Порядок элементов в паре не важен.
17.txt
'''
#f= open('C:/Users/qwe/Downloads/17.txt','r')
#l=[]
#k=0
#s=0
#sm=0
#for s in f:
#    l.append(int(s))
#for i in range(len(l)-1):
#    for j in range(i+1,len(l)):
#        if (l[i]+l[j])%9==0:
#            k+=1
#            s=l[i]+l[j]
#            sm=max(sm,s)
#print(k, sm)
'''
(№ 3713) (А. Комков) Исполнитель Нолик преобразует двоичное число, записанное на экране.
У исполнителя есть две команды, которым присвоены номера:
1. Прибавить 1
2. Добавить слева 1
Первая команда увеличивает число на 1. Вторая команда приписывает к двоичному числу слева 1,
 например, для числа 10 результатом работы данной команды будет являться число 110.
Сколько существует программ, которые исходное двоичное число 100 преобразуют в двоичное число 110001?
'''
#def F(n):
#    if n=='110001':
#        return 1
#    if int(n,2)>int('110001',2):
#        return 0
#    if int(n,2)<int('110001',2):
#        return F(bin(int(n,2)+1)[2:])+F('1'+n)
#
#
#n='100'
#print(F(n))

'''
2	(№ 4148) (Е. Джобс) Логическая функция F задаётся выражением ((a ∧ b) ≡ ¬c) ∧ (b → d). 
На рисунке приведён частично заполненный фрагмент таблицы истинности функции F, 
содержащий неповторяющиеся наборы аргументов, при которых функция F истинна. Определите, 
какому столбцу таблицы истинности функции F соответствует каждая из переменных a, b, c, d.
В ответе напишите буквы a, b, c, d в том порядке, в котором идут соответствующие им столбцы. 
Буквы в ответе пишите подряд, никаких разделителей между буквами ставить не нужно.'''
#print('a b c d')
#for a in range(2):
#    for b in range(2):
#        for c in range(2):
#            for d in range(2):
#                if  ((a and b) == (not c)) and (b <= d):
#                    print(a,b,c,d)
#
#
'''
5	(№ 3522) (Е. Джобс) Автомат обрабатывает десятичное натуральное число N по следующему алгоритму:
1) Строится двоичная запись числа N.
2) К этой записи справа дописывается 0, если число нечетное, и слева 1 в обратном случае.
3) Если единиц в двоичном числе получилось четное количество, справа дописывается 1, иначе 0.
Например, двоичная запись 1010 числа 10 будет преобразована в 110100.
Полученная таким образом запись (в ней на два разряда больше, чем в записи исходного числа N) является двоичной записью числа – результата работы данного алгоритма.
Укажите минимальное число N, для которого результат работы алгоритма будет больше 228. В ответе это число запишите в десятичной системе счисления.
'''
#for i in range(100):
#    n=bin(i)[2:]
#    if i %2==0:
#        n=n+'0'
#    else:
#        n+='1'
#    if n.count('1')%2==0:
#        n+='1'
#    else:
#        n+='0'
#    print(i,int(n,2))
#
#
'''#(№ 4153) (Е. Джобс) Какое максимальное значение переменной s, подаваемого на вход программе, 
для которого в результате работы программы на экран будет выведено значение 46?'''
#for i in range(100000):
#    n = 1
#    s = i
#    while s > 200:
#        s = s - 15
#        n = n + 3
#    if n==46:
#        print('i=',i,n)

'''
8	(№ 3538) (Е. Джобс) Все 4-буквенные слова, составленные из букв П, Р, В, Д, А, 
записаны в алфавитном порядке и пронумерованы. Вот начало списка:
1. АААА
2. АААВ
3. АААД
4. АААП
5. АААР
6. ААВА
...
Найдите номер первого слова в этом списке, которое не содержит гласных и одинаковых букв.
'''
#k=0
#l=["А","В","Д","П","Р"]
#for q in l:
#    for w in l:
#        for e in l:
#            for r in l:
#                k += 1
#                o=q+w+e+r
#                print(k, o)
#                if o.count('А')==0 and o.count('В')<=1 and o.count('Д')<=1 and o.count('П')<=1 and o.count('Р')<=1:
#                    print(k,'!!!!!!!')


#for i in range(1000):
#    x = i
#    s = 0
#    while x > 0:
#        s = s + x % 9
#        x = x // 3
#    if s==17:
#        print('i=',i,s)

#k=0
#from itertools import product
#for x in product('АКЛОШ',repeat= 5):
#    s=''.join(x)
#    if s.count('А')>=1 or s.count('О')>=1:
#        k+=1
#        print(s,k)

#print('a b c d')
#for a in range(2):
#    for b in range(2):
#        for c in range(2):
#            for d in range(2):
#                if (a <= b) and not (b == c) and (d <= a):
#                    print(a,b,c,d)

#for n in range(257):
#    n=i-1
#    i=str(bin(i)[2:])
#
#i=bin(204)
#print(i)
#
#o=int('00110011',2)
#print(o)
#k=0
#for i in range(1000):
#    s = i
#    n = 10
#    while s - n < 1000:
#        s = s + n
#        n = n + 5
#    if n==80:
#        k+=1
#        print(i,k)
#q='3'*17
#w='4'*23
#e='5'*29


#o=(q+ w+ e) 17
#while '34' in o or '53' in o:
#    if '43' in o:
#        o=o.replace('43','33',1)
#    else:
#        o = o.replace('53', '433', 1)
#    print(o)
#print(o.count('3'))
#
#o=(q+e+ w)
#while '34' in o or '53' in o:
#    if '43' in o:
#        o=o.replace('43','33',1)
#    else:
#        o = o.replace('53', '433', 1)
#print(o)
#print(o.count('3'))
#
#o=(w+ q+ e)
#while '34' in o or '53' in o:
#    if '43' in o:
#        o=o.replace('43','33',1)
#    else:
#        o = o.replace('53', '433', 1)
#print(o)
#print(o.count('3'))
#
#o=(w+ e+ q)
#while '34' in o or '53' in o:
#    if '43' in o:
#        o=o.replace('43','33',1)
#    else:
#        o = o.replace('53', '433', 1)
#print(o)
#print(o.count('3'))
#
#o=(e +q +w)
#while '34' in o or '53' in o:
#    if '43' in o:
#        o=o.replace('43','33',1)
#    else:
#        o = o.replace('53', '433', 1)
#print(o)
#print(o.count('3'))
#
#o=(e+ w+ q)
#
#
#while '34' in o or '53' in o:
#    if '43' in o:
#        o=o.replace('43','33',1)
#    else:
#        o = o.replace('53', '433', 1)
#print(o)
#print(o.count('3'))
#
#o='4'*6+'5'*29+'43'*17
#while '34' in o or '53' in o:
#    if '43' in o:
#        o=o.replace('43','33',1)
#    else:
#        o = o.replace('53', '433', 1)
#    print(o)
#print(o.count('3'))
#
#
#'''Для какого наименьшего целого неотрицательного числа А выражение
#(2x + 3y < A) ∨ (x ≥ y) ∨ (y > 24)
#тождественно истинно, т.е. принимает значение 1 при любых целых неотрицательных x и y?'''
#for a in range(200):
#    i=1
#    for x in range(200):
#        for y in range(200):
#            if not((2*x + 3*y < a) or (x >= y) or (y > 24)):
#                i=0
#    if (i==1):
#        print(a)

#def F(n):
#    if n > 2:
#        return F(n-1)+ F(n-2)
#    else: return 1
#F(6)
#
#
#'''Файл содержит последовательность неотрицательных целых чисел, не превышающих 10000.
#Назовём парой два идущих подряд элемента последовательности.
# Определите количество пар, в которых хотя бы один из двух элементов делится на 3 и хотя бы один из двух элементов меньше
#  среднего арифметического всех чётных элементов последовательности. В ответе запишите два числа: сначала количество
#   найденных пар, а затем
#— максимальную сумму элементов таких пар.
#Задание 17
#Например, в последовательности (3 8 9 4) есть две подходящие пары:
#(3 8) и (9 4), в ответе для этой последовательности надо записать числа 2 и 13.
#
# '''
#f=open('C:/Users/qwe/Downloads/154.txt','r')
#k=0
#s=0
#l=[]
#for i in f:
#    l.append(int(i))
#for i in range(len(l)):
#    if l[i]%2==0:
#        s=s+l[i]
#        k+=1
#print(len(l))
#p=s/k
#k=0
#ps=0
#ms=0
#for i in range(len(l)-1):
#    if (l[i]%3==0 or  l[i+1]%3==0) and (l[i]<p or l[i+1]<p):
#        k+=1
#        ps=l[i]+l[i+1]
#        ms=max(ps,ms)
#print('k=',k,'MMMSSS===',ms)


#'''Текстовый файл состоит не более чем из 106 символов A, B и C.
#Определите максимальное количество идущих подряд символов B.
#Для выполнения этого задания следует написать программу.
#Ниже приведён файл, который необходимо обработать с помощью данного алгоритма.'''
#s=''
#f=open('C:/Users/qwe/Downloads/124.txt','r')
#s=f.read()
#print(s)
#print(len(s))
#km=0
#pk=0
#for i in range (len(s)):
#    if s[i]=='B':
#        pk+=1
#    else:
#        km=max(km,pk)
#        pk=0
#print(km)
#'''Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [185311;185330],
# числа, имеющие ровно четыре различных натуральных делителя.
# Для каждого найденного числа запишите эти четыре делителя в четыре соседних столбца на экране с новой строки.
# Делители в строке должны следовать в порядке возрастания.
#Например, в диапазоне [12;14] ровно четыре различных натуральных делителя имеет число 14,
#поэтому для этого диапазона вывод на экране должна содержать следующие значения:
#1 2 7 14'''
#for  i in range(185311,185331):
#    k=0
#    for l in range(1,i+1):
#        if i%l==0:
#            k+=1
#    if k==4:
#        print('',i)
#        for l in range(1, i + 1):
#            if i % l == 0:
#                print(l)
#
#
#
#

#from itertools import product
#for x in product('qwe',repeat=3):
#    i=''.join(x)
#    if i.count('q')==1 and i.count('w')==1 and i.count('e')==1 :
#        print(i)
#
#'''(№ 4362) (П. Волгин) В файле 17-9.txt содержится последовательность целых чисел.
#Элементы последовательности могут принимать значения от 0 до 1100 включительно.
#Определите сначала количество троек элементов последовательности,
#в которых хотя бы два числа в двоичной системе счисления имеют не менее 3 единиц
#и эти же два числа в двоичной системе счисления имеют как минимум один ноль,
#а затем максимальное число среди максимальных чисел в подходящих тройках.
# Под тройкой подразумевается три идущих подряд элемента последовательности.'''
#m3=0
#mmm=0
#k=0
#f=open('C:/Users/qwe/Downloads/17-9.txt','r')
#p=[]
#for n in f:
#   p.append(int(n))
#for i in range(len(p)-2):
#   q=bin(p[i])[2:]
#   w=bin(p[i+1])[2:]
#   e=bin(p[i+2])[2:]
#   if (q.count('1') >= 3 and w.count('1') >= 3) and (q.count('0') >= 1 and w.count('0') >= 1)  \
#       or (q.count('1') >= 3 and e.count('1') >= 3) and (q.count('0') >= 1 and e.count('0') >= 1) \
#       or (w.count('1') >= 3 and e.count('1') >= 3) and (w.count('0') >= 1 and e.count('0') >= 1):
#        k+=1
#        m3=max(p[i],p[i+1],p[i+2])
#        mmm=max(mmm,m3)
#
#   print(k)
#print(mmm)
#

#for i in  range(53,100):
#    x = i
#    a = 2*x - 91
#    b = 3*x - 159
#    while a != b:
#        if a > b:
#            a -= b
#        else:
#            b -= a
#        #print('a=',a,'b=',b)
#    if a==15:
#        print('!!!!!!!!!!!!!!',i,a)
#m=0
#k=0
#smmax=0
#smmin=9999
#f=open('C:/Users/qwe/Downloads/17-273.txt','r')
#l=[]
#for i in f:
#    l.append(int(i))
#for i1 in range(len(l)):
#    m=max(m,l[i1])
#for i2 in range(len(l)-2):
#    b=l[i2]+l[i2+1]+l[i2+2]
#    if b<m:
#        k+=1
#        smmin=min(smmin,l[i2],l[i2+1],l[i2+2])
#        smmax = max(smmax, l[i2], l[i2 + 1], l[i2 + 2])
#print(k,smmin+smmax )
#
#

'''(№ 4899) (Е. Джобс) В файле 17-272.txt содержится последовательность целых чисел. 
Элементы последовательности могут принимать целые значения от -10 000 до 10 000 включительно.
 Подходящей считается пара, в которой хотя бы один элемент больше среднего арифметического всех положительных элементов последовательности. 
 Запишите в ответе количество подходящих пар, а затем максимальную сумму цифр одного элемента в подходящих парах.
 В данной задаче под парой подразумевается два идущих подряд элемента последовательности.
Например, рассмотрим последовательность из шести элементов: 12; 18; 3; -15; 11; 16.
 Среднее арифметическое всех положительных элементов последовательности равно 12. 
 Следовательно, подходит 3 пары: (12; 18), (18; 3) и (11; 16). 
 Суммы цифр у элементов: 3 (1+2), 9 (1+8), 3, 2 (1+1), 7 (1+6). Ответ: 3 9.'''
#f=open('C:/Users/qwe/Downloads/17-272.txt','r')
#l=[]
#k=0
#ch=0
#sr=0
#for i in f:
#    l.append(int(i))
#for i in range(len(l)):
#    if l[i]>0:
#        ch+=l[i]
#        k+=1
#sr=ch//k
#k1=0
#me=0
#s=0
#s1=0
#b=0
#a=''
#for i in range(len(l)-1):
#    if l[i]>sr or l[i+1]>sr:
#        k1+=1
#        a=str(abs(l[i]))
#        print(a)
#        print(abs(l[i+1]))
#        for i in a:
#            s += int(i)
#        b = abs(l[i+1])
#        while b>0:
#            s1=s1+b%10
#            b=b//10
#        me =max(me,s,s1)
#print(k1,me)



#
#k=0
#
#p=''
#s=0
#mmm=0
#f=open('C:/Users/qwe/Downloads/17-243.txt','r')
#l=[]
#for i in f:
#   l.append(int(i))
#l2=[]
#for j in range(len(l)):
#    if l[j]%51==0:
#        l2.append(l[j])
#for i in range(len(l2)):
#   p+=str(l2[i])
#print(p)
#for i1 in p:
#    s=s+int(i1)
#print(s)
#for i in range(len(l)-1):
#    if l[i]<s or l[i+1]<s:
#        k+=1
#        mmm=max(mmm,l[i]+l[i+1])
#print(k,mmm)








